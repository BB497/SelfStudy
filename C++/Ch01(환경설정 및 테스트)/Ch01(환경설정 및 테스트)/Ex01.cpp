// 첫 번째 c++ 프로그램 작성 및 테스트
#include <iostream>
#include <stdio.h>
/*
* #include<iostream> 은 iostream이라는 헤더를 포함시키라는 전처리기이다.
* iostream 헤더에는 표준 입출력에 필요한 클래스들과 객체들이 정의되어있다.
* 따라서 cin 과 cout 같은 객체를 사용하려면 iostream 파일에 포함시켜야 한다.
*/
using namespace std;
/*
* using namespace std; 코드는 C++ 프로그램에서 변수의 이름이나 함수의 이름과
* 같은 수많은 이름(식별자) 들이 사용되고, 이들 이름들은 이름 공간(namespace)라고
* 하는 영역으로 분리되어 저장되어 있다.
* C++ 에서 이름을 사용할 때에는 반드시 "공간::이름" 과 같이 공간명을 이름 앞에
* 붙여야 한다. 출력을 담당하는 객체인 cout 은 std라고 하는 이름 공간에 속한다.
* 따라서 cout 은 원칙적으로는 std::cout << "string" << std::endl; 적어야 함.
* 
* 결과적으로 매번 std를 붙이는 것이 번거롭다. 이런 경우에 사용할 수 있는 것이 바로
* using 이라는 지시어이다.
* using namespace std; 는 바로 우리가 현재 사용하는 이름 공간을 std로 설정을 하는
* 문장이다. 따라서 std 안에 모든 이름은 std를 생략하고 사용할 수 있다.
*/


int main(void) {		// main함수. int는 리턴값. ()안에는 매개변수(Arguments)
						// void는 매개변수 없다는 뜻.
						// main() 함수가 프로그램의 시작점. 프로젝트 내 하나만 존재.



	cout << "Hello World!" << endl;
	/*
	* Hello World! 라는 문자열을 출력하는 코드.
	* endl(end of line): 줄의 끝을 의미하고, 개행을 시켜준다. ('\n' 과 동일)
	* cout: 콘솔 화면에 데이터를 출력하는 작업을 맡은 객체이다. cout은 콘솔 화면에
	* 데이터를 출력하는 작업을 맡은 객체이다. 화면에 데이터를 출력하려면 cout과
	* << 연산자를 사용하면 된다. 어떠한 데이터라도 << 연산자를 사용하여 출력할 수 있다.
	* 한 줄에 여러 개의 << 연산자를 사용할 수 있다. 출력은 왼쪽에서 오른쪽으로 출력됨.
	*/
	cout << 'a';		// 개행 없음
	cout << 10 << "개의 사과가 있습니다." << endl;
	printf("Hi\n");		// C의 함수도 C++ 에서 사용할 수 있다.

	return 0;
	/*
	* main() 함수의 특수성으로 return문을 생략해도 되지만, 앞으로 사용자 정의 함수를
	* 만들 때는 반드시 리턴타입과 동일하나 return 문을 작성해야 한다.
	* 운영체제가 프로그램을 CPU에게 실행하게끔 스케줄링하는데, CPU가 작업 큐에서 이
	* 프로그램을 실행하게 되는 것이다.
	* 0이 정수값이고, 리턴값이 int로 되어 있기 때문에 0을 준다.
	* 보통 0의 값은 프로그램이 정상적으로 종료되었음을 알린다.
	*/
}

// ctrl + shift + / : 주석처리 및 주석 풀기